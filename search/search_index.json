{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ZenTools for Maya","text":"<p>ZenTools for Maya is a set of modeling tools for manipulating a polygon mesh using dynamically created NURBS curves and surfaces to distribute vertices and/or UVs.</p>"},{"location":"contributing/","title":"Contributing to ZenTools for Maya","text":""},{"location":"contributing/#for-contributors-and-code-owners","title":"For Contributors and Code Owners","text":"<ol> <li> <p>Clone and Install</p> <p>To install this project for development of this package, clone this repository (replacing \"~/Code\", below, with the directory under which you want your project to reside), then run <code>make</code>:</p> <pre><code>cd ~/Code &amp;&amp; \\\ngit clone\\\nhttps://github.com/enorganic/maya-zen-tools.git maya-zen-tools &amp;&amp; \\\ncd maya-zen-tools &amp;&amp; \\\nmake\n</code></pre> </li> <li> <p>Create a new branch for your changes (replacing \"descriptive-branch-name\"     with a descriptive branch name, and replacing feature with bugfix     if the branch addresses a bug):</p> <pre><code>git branch feature/descriptive-branch-name\n</code></pre> </li> <li> <p>Make some changes.</p> </li> <li> <p>Format and lint your code:</p> <pre><code>make format\n</code></pre> </li> <li> <p>Test your changes:</p> <pre><code>make test\n</code></pre> </li> <li> <p>Push your changes and create a pull request.</p> </li> </ol>"},{"location":"contributing/#for-everyone-else","title":"For Everyone Else","text":"<p>If you are not a contributor on this project, you can still create pull requests, however you will need to fork this project, push changes to your fork, and create a pull request from your forked repository.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#autodesk-app-store","title":"Autodesk App Store","text":"<p>Installers for Mac or Windows can be downloaded (free) from the Autodesk App Store.</p> <p></p>"},{"location":"installation/#script-editor-installation","title":"Script Editor Installation","text":"<p>You can install ZenTools for Maya by copy/pasting the following python snippet into your script editor, executing ([cmd] + [return] or [ctrl] + [enter]), then restarting Maya:</p> <pre><code>import os;\nfrom subprocess import check_call;\nfrom pathlib import Path;\n\nmayapy: str = str(\n    Path(os.environ.get(\"MAYA_LOCATION\")).joinpath(\"bin\", \"mayapy\")\n);\ncheck_call([mayapy, \"-m\", \"pip\", \"install\", \"maya-zen-tools\"]);\ncheck_call([mayapy, \"-m\", \"maya_zen_tools\", \"install\"])\n</code></pre> <ul> <li> <p>In Maya, select the \"modeling\" menu set. You can do this from the top-left     corner of the user interface.</p> <p></p> </li> <li> <p>In the bottom-right corner of the Maya user interface, make     sure your script editor is toggled to \"python\".</p> <p></p> </li> <li> <p>In the bottom-right corner of the Maya user interface, paste the     above snippet of python code into your script editor, then press \"return\".</p> <p></p> </li> </ul> <p>The ZenTools menu will now be visible whenever you are in the \"Modeling\" menu set.</p> <p></p>"},{"location":"installation/#command-line-installation","title":"Command Line Installation","text":"<p>For most users, script editor installation will be the quickest/easiest way to install ZenTools. For network/system administrators wishing to automate workstation configurations, however, command-line installation will be more expedient.</p> <p>You can install ZenTools for Maya with the following command, if you have added the <code>mayapy</code> interpreter's parent directory to your system path:</p> <pre><code>mayapy -m pip install maya-zen-tools &amp;&amp; mayapy -m maya_zen_tools.install\n</code></pre> <p>The location of <code>mayapy</code> will depend on your Maya version and operating system:</p> Platform Location Windows <code>C:\\Program Files\\Autodesk\\Maya&lt;VersionNumber&gt;\\bin\\</code> Linux <code>/usr/autodesk/Maya&lt;VersionNumber&gt;/bin/</code> macOS <code>/Applications/Autodesk/maya&lt;VersionNumber&gt;/Maya.app/Contents/bin/</code>"},{"location":"privacy/","title":"Privacy","text":"<p>ZenTools for Maya does not collect or share any user data for any purpose.</p>"},{"location":"api/errors/","title":"errors","text":""},{"location":"api/errors/#maya_zen_tools.errors","title":"maya_zen_tools.errors","text":""},{"location":"api/errors/#maya_zen_tools.errors.ZenToolsError","title":"ZenToolsError","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for ZenTools Exceptions</p> Source code in <code>src/maya_zen_tools/errors.py</code> <pre><code>class ZenToolsError(Exception):\n    \"\"\"\n    Base class for ZenTools Exceptions\n    \"\"\"\n</code></pre>"},{"location":"api/errors/#maya_zen_tools.errors.TooManyShapesError","title":"TooManyShapesError","text":"<p>               Bases: <code>maya_zen_tools.errors.InvalidSelectionError</code></p> <p>Raised when a loop or loft is attempted using components from more than one polygon mesh.</p> Source code in <code>src/maya_zen_tools/errors.py</code> <pre><code>class TooManyShapesError(InvalidSelectionError):\n    \"\"\"\n    Raised when a loop or loft is attempted using\n    components from more than one polygon mesh.\n    \"\"\"\n\n    def __init__(self, shapes: Sequence[str]) -&gt; None:\n        self.shapes: tuple[str, ...] = tuple(shapes)\n        super().__init__(shapes)\n\n    def __repr__(self) -&gt; str:\n        return (\n            f\"TooManyShapesError({self.shapes!r}): \"\n            \"Selected components must all belong to the same shape.\"\n        )\n\n    def __str__(self) -&gt; str:\n        return repr(self)\n</code></pre>"},{"location":"api/flood/","title":"flood","text":""},{"location":"api/flood/#maya_zen_tools.flood","title":"maya_zen_tools.flood","text":""},{"location":"api/flood/#maya_zen_tools.flood.flood_select","title":"flood_select","text":"<pre><code>flood_select(*selection: str) -&gt; tuple[str, ...]\n</code></pre> <p>Given a <code>selection</code> comprised of:</p> <ul> <li>One or more polymesh faces, vertices, or UVs, and...</li> <li>A set of edges enclosing an area around the faces, vertices, or   UVs</li> </ul> <p>...this function will expand the face, vertex, or UV selection to encompass the area enclosed by the selected edges.</p> Source code in <code>src/maya_zen_tools/flood.py</code> <pre><code>def flood_select(*selection: str) -&gt; tuple[str, ...]:\n    \"\"\"\n    Given a `selection` comprised of:\n\n    - One or more polymesh faces, vertices, or UVs, and...\n    - A set of edges enclosing an area around the faces, vertices, or\n      UVs\n\n    ...this function will expand the face, vertex, or UV selection to\n    encompass the area enclosed by the selected edges.\n    \"\"\"\n    set_wait_cursor_state(True)\n    try:\n        selection = selection or tuple(cmds.ls(selection=True, flatten=True))\n        selected_faces: tuple[str, ...] = tuple(\n            iter_selected_components(\"f\", selection=selection)\n        )\n        selected_vertices: tuple[str, ...] = tuple(\n            iter_selected_components(\"vtx\", selection=selection)\n        )\n        selected_uvs: tuple[str, ...] = tuple(\n            iter_selected_components(\"map\", selection=selection)\n        )\n        selected_edges: tuple[str, ...] = tuple(\n            iter_selected_components(\"e\", selection=selection)\n        )\n        # Raise an error if selected vertices span more than one mesh\n        get_components_shape(selected_faces + selected_vertices + selected_uvs)\n        selected_components: tuple[str, ...] = (\n            tuple(\n                _iter_flood_select_vertices(selected_vertices, selected_edges)\n            )\n            + tuple(_iter_flood_select_uvs(selected_uvs, selected_edges))\n            + tuple(_iter_flood_select_faces(selected_faces, selected_edges))\n        )\n        cmds.select(\n            *selection,\n            deselect=True,\n        )\n        cmds.select(*selected_components, add=True)\n    finally:\n        set_wait_cursor_state(False)\n    return selected_components\n</code></pre>"},{"location":"api/install/","title":"install","text":""},{"location":"api/install/#maya_zen_tools.install","title":"maya_zen_tools.install","text":"<p>This module modifies your userSetup.py script to add startup procedures needed to use ZenTools.</p>"},{"location":"api/install/#maya_zen_tools.install.install","title":"install","text":"<pre><code>install() -&gt; None\n</code></pre> <p>Check to see if the ZenTools Autodesk marketplace add-in is installed, and if not\u2014add the line \"from maya_zen_tools import startup\" to userSetup.py (if it isn't already in the script).</p> Source code in <code>src/maya_zen_tools/install.py</code> <pre><code>def install() -&gt; None:\n    \"\"\"\n    Check to see if the ZenTools Autodesk marketplace add-in\n    is installed, and if not\u2014add the line \"from maya_zen_tools import startup\"\n    to userSetup.py (if it isn't already in the script).\n    \"\"\"\n    if find_zen_tools_package_directory():\n        # If there's a package\u2014we don't need to look for a userSetup.py script.\n        return\n    user_setup_py: str = \"\"\n    user_setup_py_path: Path = find_user_setup_py()\n    if user_setup_py_path.is_file():\n        with open(user_setup_py_path) as user_setup_py_io:\n            user_setup_py = user_setup_py_io.read()\n    if not (\n        user_setup_py\n        and re.search(\n            r\"(^|\\n)from maya_zen_tools import startup(\\n|$)\", user_setup_py\n        )\n    ):\n        with open(user_setup_py_path, \"a\") as user_setup_py_io:\n            user_setup_py_io.write(\"from maya_zen_tools import startup\\n\")\n</code></pre>"},{"location":"api/loft/","title":"loft","text":""},{"location":"api/loft/#maya_zen_tools.loft","title":"maya_zen_tools.loft","text":""},{"location":"api/loft/#maya_zen_tools.loft.loft_distribute_vertices_between_edges","title":"loft_distribute_vertices_between_edges","text":"<pre><code>loft_distribute_vertices_between_edges(\n    *selected_edges: str,\n    distribution_type: str = maya_zen_tools.options.DistributionType.UNIFORM,\n    create_deformer: bool = False\n) -&gt; (\n    tuple[str, ...] | tuple[tuple[str, ...], str, str, str]\n)\n</code></pre> <p>Given a selection of edge loop segments, aligned parallel to one another on a polygon mesh, distribute the vertices sandwiched between along a loft.</p> Source code in <code>src/maya_zen_tools/loft.py</code> <pre><code>def loft_distribute_vertices_between_edges(\n    *selected_edges: str,\n    distribution_type: str = options.DistributionType.UNIFORM,\n    create_deformer: bool = False,\n) -&gt; tuple[str, ...] | tuple[tuple[str, ...], str, str, str]:\n    \"\"\"\n    Given a selection of edge loop segments, aligned parallel to one\n    another on a polygon mesh, distribute the vertices sandwiched between\n    along a loft.\n    \"\"\"\n    cleanup_items: list[str] = []\n    selected_edges = selected_edges or tuple(iter_selected_components(\"e\"))\n    selected_edge_loops: tuple[tuple[str, ...], ...] = tuple(\n        iter_aligned_contiguous_edges(*selected_edges)\n    )\n    set_wait_cursor_state(True)\n    try:\n        index: int\n        edge_loop: tuple[str, ...]\n        curve_transforms: list[str] = []\n        curve_shapes: list[str] = []\n        loft: str = create_node(\"loft\", name=\"loft#\")\n        for index, edge_loop in enumerate(selected_edge_loops):\n            rebuild_curve: str = create_edges_rebuild_curve(edge_loop)\n            if create_deformer:\n                curve_transform: str = create_node(\n                    \"transform\", name=\"loftCurve#\", skip_select=True\n                )\n                curve_shape: str = create_node(\n                    \"nurbsCurve\",\n                    name=\"loftCurveShape#\",\n                    parent=curve_transform,\n                    skip_select=True,\n                )\n                cmds.connectAttr(\n                    f\"{rebuild_curve}.outputCurve\", f\"{curve_shape}.create\"\n                )\n                center_pivot(curve_transform)\n                cmds.connectAttr(\n                    f\"{curve_shape}.worldSpace[0]\",\n                    f\"{loft}.inputCurve[{index}]\",\n                )\n                curve_transforms.append(curve_transform)\n                curve_shapes.append(curve_shape)\n            else:\n                cmds.connectAttr(\n                    f\"{rebuild_curve}.outputCurve\",\n                    f\"{loft}.inputCurve[{index}]\",\n                )\n            cleanup_items.append(rebuild_curve)\n        rebuild_surface: str = create_node(\n            \"rebuildSurface\", name=\"loftBetweenEdgesRebuildSurface#\"\n        )\n        cleanup_items.append(rebuild_surface)\n        cmds.connectAttr(\n            f\"{loft}.outputSurface\",\n            f\"{rebuild_surface}.inputSurface\",\n        )\n        cmds.setAttr(f\"{rebuild_surface}.spansU\", len(selected_edge_loops) - 1)\n        cmds.setAttr(f\"{rebuild_surface}.spansV\", len(selected_edge_loops[0]))\n        cmds.setAttr(f\"{rebuild_surface}.keepRange\", 2)\n        cmds.setAttr(f\"{rebuild_surface}.endKnots\", 1)\n        cmds.setAttr(f\"{rebuild_surface}.direction\", 0)\n        vertices: set[str] = _surface_distribute_vertices_between_edges(\n            f\"{rebuild_surface}.outputSurface\",\n            edge_loops=selected_edge_loops,\n            distribution_type=distribution_type,\n        )\n        faces: tuple[str, ...] = tuple(\n            cmds.ls(\n                *cmds.polyListComponentConversion(\n                    *vertices, fromVertex=True, toFace=True, internal=True\n                ),\n                flatten=True,\n            )\n        )\n        if create_deformer:\n            surface_transform: str = create_node(\n                \"transform\", name=\"loftBetweenEdges#\"\n            )\n            surface_shape: str = create_node(\n                \"nurbsSurface\",\n                name=f\"{surface_transform}Shape\",\n                parent=surface_transform,\n            )\n            cmds.connectAttr(\n                f\"{loft}.outputSurface\",\n                f\"{surface_shape}.create\",\n            )\n            cmds.connectAttr(\n                f\"{rebuild_surface}.outputSurface\",\n                f\"{surface_shape}.create\",\n                force=True,\n            )\n            cmds.setAttr(f\"{surface_shape}.intermediateObject\", 1)\n            cmds.parent(*curve_transforms, surface_transform)\n            wrap: str = _create_wrap_deformer(\n                f\"{rebuild_surface}.outputSurface\",\n                f\"{surface_shape}.local\",\n                vertices,\n            )\n\n            def cleanup() -&gt; None:\n                \"\"\"\n                Disconnect the curves from the mesh, and the rebuilt surface\n                from the base, so that changes aren't negated by having a base\n                transform in concert with the driver\n                \"\"\"\n                cmds.delete(*curve_shapes, constructionHistory=True)\n                cmds.disconnectAttr(\n                    f\"{rebuild_surface}.outputSurface\",\n                    f\"{surface_shape}.create\",\n                )\n\n            cmds.evalDeferred(cleanup)\n            # Go into object selection mode, in order to manipulate locators\n            cmds.selectMode(object=True)\n            # Select the middle locator\n            cmds.select(curve_transforms[ceil(len(curve_transforms) / 2) - 1])\n            set_wait_cursor_state(False)\n            return (faces, surface_shape, surface_transform, wrap)\n        cmds.delete(*cleanup_items)\n        cmds.select(*faces)\n    finally:\n        set_wait_cursor_state(False)\n    return faces\n</code></pre>"},{"location":"api/loft/#maya_zen_tools.loft.loft_distribute_uvs_between_edges_or_uvs","title":"loft_distribute_uvs_between_edges_or_uvs","text":"<pre><code>loft_distribute_uvs_between_edges_or_uvs(\n    *selection: str,\n    distribution_type: str = maya_zen_tools.options.DistributionType.UNIFORM\n) -&gt; tuple[str, ...]\n</code></pre> <p>Given a selection of edge loop segments or uv loop segments, aligned parallel to one another on a polygon mesh, distribute the UVs sandwiched between along a loft.</p> Source code in <code>src/maya_zen_tools/loft.py</code> <pre><code>def loft_distribute_uvs_between_edges_or_uvs(\n    *selection: str,\n    distribution_type: str = options.DistributionType.UNIFORM,\n) -&gt; tuple[str, ...]:\n    \"\"\"\n    Given a selection of edge loop segments or uv loop segments, aligned\n    parallel to one another on a polygon mesh, distribute the UVs sandwiched\n    between along a loft.\n    \"\"\"\n    cleanup: list[str] = []\n    selection = selection or tuple(iter_selected_components(\"e\", \"map\"))\n    selected_uvs: set[str] = set(\n        iter_selected_components(\"map\", selection=selection)\n    )\n    selected_edges: set[str] = set(\n        iter_selected_components(\"e\", selection=selection)\n    )\n    if selected_edges:\n        selected_uvs |= set(\n            cmds.ls(\n                *cmds.polyListComponentConversion(\n                    *selected_edges,\n                    fromEdge=True,\n                    toUV=True,\n                ),\n                flatten=True,\n            )\n        )\n    selected_uv_loops: tuple[tuple[str, ...], ...] = tuple(\n        iter_aligned_contiguous_uvs(*selected_uvs)\n    )\n    set_wait_cursor_state(True)\n    try:\n        index: int\n        uv_loop: tuple[str, ...]\n        loft: str = create_node(\"loft\", name=\"loftBetweenUVs#\")\n        for index, uv_loop in enumerate(selected_uv_loops):\n            rebuild_curve: str\n            curve_shape: str\n            curve_transform: str\n            rebuild_curve, curve_shape, curve_transform = (\n                create_uvs_rebuild_curve(uv_loop)\n            )\n            cleanup.extend((rebuild_curve, curve_shape, curve_transform))\n            cmds.connectAttr(\n                f\"{rebuild_curve}.outputCurve\", f\"{loft}.inputCurve[{index}]\"\n            )\n        rebuild_surface: str = create_node(\n            \"rebuildSurface\", name=\"loftBetweenEdgesRebuildSurface#\"\n        )\n        cleanup.append(rebuild_surface)\n        cmds.connectAttr(\n            f\"{loft}.outputSurface\",\n            f\"{rebuild_surface}.inputSurface\",\n        )\n        cmds.setAttr(f\"{rebuild_surface}.spansU\", len(selected_uv_loops) - 1)\n        cmds.setAttr(f\"{rebuild_surface}.spansV\", len(selected_uv_loops[0]))\n        cmds.setAttr(f\"{rebuild_surface}.keepRange\", 2)\n        cmds.setAttr(f\"{rebuild_surface}.endKnots\", 1)\n        cmds.setAttr(f\"{rebuild_surface}.direction\", 0)\n        uvs: set[str] = _surface_distribute_uvs(\n            f\"{rebuild_surface}.outputSurface\",\n            uv_loops=selected_uv_loops,\n            distribution_type=distribution_type,\n        )\n        faces: tuple[str, ...] = tuple(\n            cmds.ls(\n                *cmds.polyListComponentConversion(\n                    *uvs, fromUV=True, toFace=True, internal=True\n                ),\n                flatten=True,\n            )\n        )\n        cmds.delete(*cleanup)\n        cmds.select(*faces)\n    finally:\n        set_wait_cursor_state(False)\n    return faces\n</code></pre>"},{"location":"api/loft/#maya_zen_tools.loft.show_loft_distribute_vertices_between_edges_options","title":"show_loft_distribute_vertices_between_edges_options","text":"<pre><code>show_loft_distribute_vertices_between_edges_options() -&gt; (\n    None\n)\n</code></pre> <p>Show a window with options to use when executing <code>loft_distribute_vertices_between_edges</code>.</p> Source code in <code>src/maya_zen_tools/loft.py</code> <pre><code>def show_loft_distribute_vertices_between_edges_options() -&gt; None:\n    \"\"\"\n    Show a window with options to use when executing\n    `loft_distribute_vertices_between_edges`.\n    \"\"\"\n    # Get saved options\n    get_option: Callable[[str], str | int | float | None] = partial(\n        options.get_tool_option, \"loft_distribute_vertices_between_edges\"\n    )\n    # Create the window\n    if cmds.window(WINDOW, exists=True):\n        cmds.deleteUI(WINDOW)\n    if cmds.windowPref(WINDOW, exists=True):\n        cmds.windowPref(WINDOW, remove=True)\n    cmds.window(\n        WINDOW,\n        width=450,\n        height=100,\n        title=(\n            f\"ZenTools: {LOFT_DISTRIBUTE_VERTICES_BETWEEN_EDGES_LABEL} Options\"\n        ),\n        resizeToFitChildren=True,\n        sizeable=False,\n    )\n    column_layout: str = cmds.columnLayout(\n        adjustableColumn=True,\n        parent=WINDOW,\n        columnAlign=\"left\",\n        columnOffset=(\"both\", 10),\n    )\n    selected: int = 1\n    with contextlib.suppress(ValueError):\n        selected = (\"UNIFORM\", \"PROPORTIONAL\").index(\n            get_option(  # type: ignore\n                \"distribution_type\", options.DistributionType.UNIFORM\n            )\n        ) + 1\n    cmds.radioButtonGrp(\n        label=\"Distribution Type:\",\n        parent=column_layout,\n        numberOfRadioButtons=2,\n        label1=\"Uniform\",\n        label2=\"Proportional\",\n        columnAlign=(1, \"left\"),\n        changeCommand1=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'loft_distribute_vertices_between_edges', 'distribution_type', \"\n            \"'UNIFORM')\"\n        ),\n        changeCommand2=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'loft_distribute_vertices_between_edges', 'distribution_type', \"\n            \"'PROPORTIONAL')\"\n        ),\n        select=selected,\n        height=30,\n    )\n    cmds.separator(parent=column_layout)\n    cmds.checkBox(\n        label=\"Create Deformer\",\n        parent=column_layout,\n        value=get_option(\"create_deformer\", False),  # type: ignore\n        onCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'loft_distribute_vertices_between_edges', 'create_deformer', \"\n            \"True)\"\n        ),\n        offCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'loft_distribute_vertices_between_edges', 'create_deformer', \"\n            \"False)\"\n        ),\n        height=30,\n    )\n    cmds.button(\n        label=\"Distribute\",\n        parent=column_layout,\n        command=(\n            \"from maya_zen_tools import loft\\n\"\n            \"from maya import cmds\\n\"\n            \"loft.do_loft_distribute_vertices_between_edges()\\n\"\n            f\"cmds.deleteUI('{WINDOW}')\"\n        ),\n    )\n    cmds.text(\n        label=\"\",\n        parent=column_layout,\n    )\n    cmds.showWindow(WINDOW)\n</code></pre>"},{"location":"api/loft/#maya_zen_tools.loft.do_loft_distribute_vertices_between_edges","title":"do_loft_distribute_vertices_between_edges","text":"<pre><code>do_loft_distribute_vertices_between_edges() -&gt; None\n</code></pre> <p>Execute <code>loft_distribute_vertices_between_edges</code>, getting arguments from the UI or saved options.</p> Source code in <code>src/maya_zen_tools/loft.py</code> <pre><code>def do_loft_distribute_vertices_between_edges() -&gt; None:\n    \"\"\"\n    Execute `loft_distribute_vertices_between_edges`, getting arguments from\n    the UI or saved options.\n    \"\"\"\n    kwargs: dict[str, float | bool | str] = options.get_tool_options(\n        \"loft_distribute_vertices_between_edges\"\n    )\n    loft_distribute_vertices_between_edges(**kwargs)  # type: ignore\n</code></pre>"},{"location":"api/loft/#maya_zen_tools.loft.show_loft_distribute_uvs_between_edges_or_uvs_options","title":"show_loft_distribute_uvs_between_edges_or_uvs_options","text":"<pre><code>show_loft_distribute_uvs_between_edges_or_uvs_options() -&gt; (\n    None\n)\n</code></pre> <p>Show a window with options to use when executing <code>loft_distribute_uvs_between_edges_or_uvs</code>.</p> Source code in <code>src/maya_zen_tools/loft.py</code> <pre><code>def show_loft_distribute_uvs_between_edges_or_uvs_options() -&gt; None:\n    \"\"\"\n    Show a window with options to use when executing\n    `loft_distribute_uvs_between_edges_or_uvs`.\n    \"\"\"\n    # Get saved options\n    get_option: Callable[[str], str | int | float | None] = partial(\n        options.get_tool_option, \"loft_distribute_uvs_between_edges_or_uvs\"\n    )\n    # Create the window\n    if cmds.window(WINDOW, exists=True):\n        cmds.deleteUI(WINDOW)\n    if cmds.windowPref(WINDOW, exists=True):\n        cmds.windowPref(WINDOW, remove=True)\n    cmds.window(\n        WINDOW,\n        width=470,\n        height=65,\n        title=(\n            \"ZenTools: \"\n            f\"{LOFT_DISTRIBUTE_UVS_BETWEEN_EDGES_OR_UVS_LABEL} Options\"\n        ),\n        resizeToFitChildren=True,\n        sizeable=False,\n    )\n    column_layout: str = cmds.columnLayout(\n        adjustableColumn=True,\n        parent=WINDOW,\n        columnAlign=\"left\",\n        columnOffset=(\"both\", 10),\n    )\n    selected: int = 1\n    with contextlib.suppress(ValueError):\n        selected = (\"UNIFORM\", \"PROPORTIONAL\").index(\n            get_option(  # type: ignore\n                \"distribution_type\", options.DistributionType.UNIFORM\n            )\n        ) + 1\n    cmds.radioButtonGrp(\n        label=\"Distribution Type:\",\n        parent=column_layout,\n        numberOfRadioButtons=2,\n        label1=\"Uniform\",\n        label2=\"Proportional\",\n        columnAlign=(1, \"left\"),\n        changeCommand1=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'loft_distribute_uvs_between_edges_or_uvs', 'distribution_type', \"\n            \"'UNIFORM')\"\n        ),\n        changeCommand2=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'loft_distribute_uvs_between_edges_or_uvs', 'distribution_type', \"\n            \"'PROPORTIONAL')\"\n        ),\n        select=selected,\n        height=30,\n    )\n    cmds.button(\n        label=\"Distribute\",\n        parent=column_layout,\n        command=(\n            \"from maya_zen_tools import loft\\n\"\n            \"from maya import cmds\\n\"\n            \"loft.do_loft_distribute_uvs_between_edges_or_uvs()\\n\"\n            f\"cmds.deleteUI('{WINDOW}')\"\n        ),\n    )\n    cmds.showWindow(WINDOW)\n</code></pre>"},{"location":"api/loft/#maya_zen_tools.loft.do_loft_distribute_uvs_between_edges_or_uvs","title":"do_loft_distribute_uvs_between_edges_or_uvs","text":"<pre><code>do_loft_distribute_uvs_between_edges_or_uvs() -&gt; None\n</code></pre> <p>Retrieve options and execute <code>loft_distribute_uvs_between_edges_or_uvs</code>.</p> Source code in <code>src/maya_zen_tools/loft.py</code> <pre><code>def do_loft_distribute_uvs_between_edges_or_uvs() -&gt; None:\n    \"\"\"\n    Retrieve options and execute `loft_distribute_uvs_between_edges_or_uvs`.\n    \"\"\"\n    kwargs: dict[str, float | bool | str] = options.get_tool_options(\n        \"loft_distribute_uvs_between_edges_or_uvs\"\n    )\n    loft_distribute_uvs_between_edges_or_uvs(**kwargs)  # type: ignore\n</code></pre>"},{"location":"api/loop/","title":"loop","text":""},{"location":"api/loop/#maya_zen_tools.loop","title":"maya_zen_tools.loop","text":""},{"location":"api/loop/#maya_zen_tools.loop.select_edges_between_vertices","title":"select_edges_between_vertices","text":"<pre><code>select_edges_between_vertices(\n    *selected_vertices: str,\n    use_selection_order: bool = False,\n    close: bool = False\n) -&gt; tuple[str, ...]\n</code></pre> <p>Add the edges forming the shortest path between selected vertices to the current selection.</p> <p>Parameters:</p> <ul> <li> <code>use_selection_order</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If <code>True</code>, the edge path will follow the selection order, if two or more vertices are selected.</p> </li> <li> <code>close</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If <code>True</code>, the vertices between the last and first selected vertex will be included.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[str, ...]</code>           \u2013            <p>A tuple of the selected edges.</p> </li> </ul> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def select_edges_between_vertices(\n    *selected_vertices: str,\n    use_selection_order: bool = False,\n    close: bool = False,\n) -&gt; tuple[str, ...]:\n    \"\"\"\n    Add the edges forming the shortest path between selected vertices to\n    the current selection.\n\n    Parameters:\n        use_selection_order: If `True`, the edge path will follow the selection\n            order, if two or more vertices are selected.\n        close: If `True`, the vertices between the last and first selected\n            vertex will be included.\n\n    Returns:\n        A tuple of the selected edges.\n    \"\"\"\n    set_wait_cursor_state(True)\n    try:\n        if use_selection_order:\n            # Check to make sure that selection order is being tracked, and\n            # fall back to automatic sorting if not.\n            use_selection_order = cmds.selectPref(\n                trackSelectionOrder=True, query=True\n            )\n        if not use_selection_order:\n            close = False\n        # If vertices are not explicitly passed, we get them by\n        # flattening the current selection of vertices\n        selected_vertices = selected_vertices or tuple(\n            iter_selected_components(\"vtx\")\n        )\n        if not use_selection_order:\n            # If we have opted not to use selection order, or are unable to\n            # because it is not being tracked, we fall back to auomatic sorting\n            selected_vertices = tuple(iter_sorted_vertices(selected_vertices))\n        edges: tuple[str, ...] = tuple(\n            iter_vertices_edges(\n                iter_shortest_vertices_path(\n                    (*selected_vertices, selected_vertices[0])\n                    if close\n                    else selected_vertices\n                )\n            )\n        )\n        # Select edges\n        cmds.select(*edges, add=True)\n        # Deselect vertices\n        cmds.select(selected_vertices, deselect=True)\n    finally:\n        set_wait_cursor_state(False)\n    return edges\n</code></pre>"},{"location":"api/loop/#maya_zen_tools.loop.select_edges_between_uvs","title":"select_edges_between_uvs","text":"<pre><code>select_edges_between_uvs(\n    *selected_uvs: str,\n    use_selection_order: bool = False,\n    close: bool = False\n) -&gt; tuple[str, ...]\n</code></pre> <p>Add the edges forming the shortest path between selected UVs to the current selection.</p> <p>Parameters:</p> <ul> <li> <code>use_selection_order</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If <code>True</code>, the edge path will follow the selection order, if two or more UVs are selected.</p> </li> <li> <code>close</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If <code>True</code>, the UVs between the last and first selected UV will be included.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[str, ...]</code>           \u2013            <p>A tuple of the selected edges.</p> </li> </ul> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def select_edges_between_uvs(\n    *selected_uvs: str,\n    use_selection_order: bool = False,\n    close: bool = False,\n) -&gt; tuple[str, ...]:\n    \"\"\"\n    Add the edges forming the shortest path between selected UVs to\n    the current selection.\n\n    Parameters:\n        use_selection_order: If `True`, the edge path will follow the selection\n            order, if two or more UVs are selected.\n        close: If `True`, the UVs between the last and first selected\n            UV will be included.\n\n    Returns:\n        A tuple of the selected edges.\n    \"\"\"\n    set_wait_cursor_state(True)\n    try:\n        if use_selection_order:\n            # Check to make sure that selection order is being tracked, and\n            # fall back to automatic sorting if not.\n            use_selection_order = cmds.selectPref(\n                trackSelectionOrder=True, query=True\n            )\n        if not use_selection_order:\n            close = False\n        # If UVs are not explicitly passed, we get them by\n        # flattening the current selection of UVs\n        selected_uvs = selected_uvs or tuple(iter_selected_components(\"map\"))\n        if not use_selection_order:\n            # If we have opted not to use selection order, or are unable to\n            # because it is not being tracked, we fall back to auomatic sorting\n            selected_uvs = tuple(iter_sorted_uvs(selected_uvs))\n        edges: tuple[str, ...] = tuple(\n            iter_uvs_edges(\n                iter_shortest_uvs_path(\n                    (*selected_uvs, selected_uvs[0]) if close else selected_uvs\n                )\n            )\n        )\n        # Select edges\n        cmds.select(*edges, add=True)\n        # Deselect UVs\n        cmds.select(selected_uvs, deselect=True)\n    finally:\n        set_wait_cursor_state(False)\n    return edges\n</code></pre>"},{"location":"api/loop/#maya_zen_tools.loop.select_between_uvs","title":"select_between_uvs","text":"<pre><code>select_between_uvs(\n    *selected_uvs: str,\n    use_selection_order: bool = False,\n    close: bool = False\n) -&gt; tuple[str, ...]\n</code></pre> <p>Add the UVs forming the shortest path between selected UVs to the current selection.</p> <p>Parameters:</p> <ul> <li> <code>use_selection_order</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If <code>True</code>, the path will follow the selection order, if two or more UVs are selected.</p> </li> <li> <code>close</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If <code>True</code>, the UVs between the last and first selected UV will be included.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[str, ...]</code>           \u2013            <p>A tuple of the selected UVs.</p> </li> </ul> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def select_between_uvs(\n    *selected_uvs: str,\n    use_selection_order: bool = False,\n    close: bool = False,\n) -&gt; tuple[str, ...]:\n    \"\"\"\n    Add the UVs forming the shortest path between selected UVs to\n    the current selection.\n\n    Parameters:\n        use_selection_order: If `True`, the path will follow the selection\n            order, if two or more UVs are selected.\n        close: If `True`, the UVs between the last and first selected\n            UV will be included.\n\n    Returns:\n        A tuple of the selected UVs.\n    \"\"\"\n    set_wait_cursor_state(True)\n    try:\n        if use_selection_order:\n            # Check to make sure that selection order is being tracked, and\n            # fall back to automatic sorting if not.\n            use_selection_order = cmds.selectPref(\n                trackSelectionOrder=True, query=True\n            )\n        if not use_selection_order:\n            close = False\n        # If UVs are not explicitly passed, we get them by\n        # flattening the current selection of UVs\n        selected_uvs = selected_uvs or tuple(iter_selected_components(\"map\"))\n        if not use_selection_order:\n            # If we have opted not to use selection order, or are unable to\n            # because it is not being tracked, we fall back to auomatic sorting\n            selected_uvs = tuple(iter_sorted_uvs(selected_uvs))\n        uvs: tuple[str, ...] = tuple(\n            iter_shortest_uvs_path(\n                (*selected_uvs, selected_uvs[0]) if close else selected_uvs\n            )\n        )\n        # Select edges\n        cmds.select(*uvs, add=True)\n    finally:\n        set_wait_cursor_state(False)\n    return uvs\n</code></pre>"},{"location":"api/loop/#maya_zen_tools.loop.curve_distribute_vertices","title":"curve_distribute_vertices","text":"<pre><code>curve_distribute_vertices(\n    *selected_vertices: str,\n    distribution_type: str = maya_zen_tools.options.DistributionType.UNIFORM,\n    create_deformer: bool = False,\n    use_selection_order: bool = False,\n    close: bool = False\n) -&gt; tuple[str, ...]\n</code></pre> <p>Create a curve passing between selected vertices and distribute all vertices on the edge loop segment along the curve.</p> <p>The curve type will be an arc if 3 vertices are selected, otherwise it will be an \"edit point\" (EP) curve.</p> <p>Parameters:</p> <ul> <li> <code>selected_vertices</code>               (<code>str</code>, default:                   <code>()</code> )           \u2013            <p>A list of vertices to create the curve from. If not provided, the current selection will be used.</p> </li> <li> <code>distribution_type</code>               (<code>str</code>, default:                   <code>maya_zen_tools.options.DistributionType.UNIFORM</code> )           \u2013            <p>How to distribute vertices along the curve. UNIFORM: Distribute vertices equidistant along the curve. PROPORTIONAL: Distribute vertices such that edge lengths are     proportional to their original lengths in relation the sum     of all edge lengths.</p> </li> <li> <code>create_deformer</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If <code>True</code>, create a deformer.</p> </li> <li> <code>use_selection_order</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If <code>True</code>, the curve will be created in selection order, otherwise, it will be automatically sorted.</p> </li> <li> <code>close</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If <code>True</code>, the curve distribution will form a closed loop, with the first selected vertex also being the last.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A tuple of the affected edges (the same as the end state selection if</p> </li> <li> <code>...</code>           \u2013            <p><code>create_deformer == False</code>).</p> </li> </ul> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def curve_distribute_vertices(\n    *selected_vertices: str,\n    distribution_type: str = options.DistributionType.UNIFORM,\n    create_deformer: bool = False,\n    use_selection_order: bool = False,\n    close: bool = False,\n) -&gt; tuple[str, ...]:\n    \"\"\"\n    Create a curve passing between selected vertices and distribute all\n    vertices on the edge loop segment along the curve.\n\n    The curve type will be an *arc* if 3 vertices are selected, otherwise it\n    will be an \"edit point\" (EP) curve.\n\n    Parameters:\n        selected_vertices: A list of vertices to create the curve from. If not\n            provided, the current selection will be used.\n        distribution_type: How to distribute vertices along the curve.\n            UNIFORM: Distribute vertices equidistant along the curve.\n            PROPORTIONAL: Distribute vertices such that edge lengths are\n                proportional to their original lengths in relation the sum\n                of all edge lengths.\n        create_deformer: If `True`, create a deformer.\n        use_selection_order: If `True`, the curve will be created in selection\n            order, otherwise, it will be automatically sorted.\n        close: If `True`, the curve distribution will form a closed loop, with\n            the first selected vertex also being the last.\n\n    Returns:\n        A tuple of the affected edges (the same as the end state selection if\n        `create_deformer == False`).\n    \"\"\"\n    set_wait_cursor_state(True)\n    try:\n        if use_selection_order:\n            # Check to make sure that selection order is being tracked, and\n            # fall back to automatic sorting if not.\n            use_selection_order = cmds.selectPref(\n                trackSelectionOrder=True, query=True\n            )\n        if not use_selection_order:\n            close = False\n        # Store the original selection\n        selection: list[str] = cmds.ls(orderedSelection=True, flatten=True)\n        # If vertices are not explicitly passed, we get them by\n        # flattening the current selection of vertices\n        selected_vertices = selected_vertices or tuple(\n            iter_selected_components(\"vtx\")\n        )\n        # Raise an error if selected vertices span more than one mesh\n        get_components_shape(selected_vertices)\n        if not use_selection_order:\n            # If we have opted not to use selection order, or are unable to\n            # because it is not being tracked, we fall back to auomatic sorting\n            selected_vertices = tuple(iter_sorted_vertices(selected_vertices))\n        # Create the Curve\n        curve_transform: str\n        curve_shape: str\n        locators: list[str]\n        curve_transform, curve_shape, *locators = _create_curve_from_vertices(\n            selected_vertices, create_locators=create_deformer, close=close\n        )\n        # Distribute Vertices Along the Curve\n        vertices: tuple[str, ...]\n        curve_shape, vertices = _distribute_vertices_loop_along_curve(\n            (\n                (*selected_vertices, selected_vertices[0])\n                if close\n                else selected_vertices\n            ),\n            curve_shape,\n            curve_transform,\n            distribution_type=distribution_type,\n            create_deformer=create_deformer,\n        )\n        edges: tuple[str, ...] = tuple(iter_vertices_edges(vertices))\n        if not create_deformer:\n            # Cleanup the curve and history if not needed for creating a\n            # deformer\n            cmds.delete(curve_shape, constructionHistory=True)\n            cmds.delete(curve_transform, constructionHistory=True)\n            cmds.delete(curve_transform)\n            cmds.select(*selection)\n            cmds.select(*edges, add=True)\n            cmds.select(selected_vertices, deselect=True)\n            set_wait_cursor_state(False)\n            return edges\n        # Go into object selection mode, in order to manipulate locators\n        cmds.selectMode(object=True)\n        # Select a center locator, if there are more than two, otherwise select\n        # an end locator\n        cmds.select(locators[ceil(len(locators) / 2) - 1])\n    finally:\n        set_wait_cursor_state(False)\n    return edges\n</code></pre>"},{"location":"api/loop/#maya_zen_tools.loop.curve_distribute_uvs","title":"curve_distribute_uvs","text":"<pre><code>curve_distribute_uvs(\n    *selected_uvs: str,\n    distribution_type: str = maya_zen_tools.options.DistributionType.UNIFORM,\n    use_selection_order: bool = False,\n    close: bool = False\n) -&gt; tuple[str, ...]\n</code></pre> <p>Create a curve passing between selected UVs and distribute all UVs on the edge loop segment along the curve.</p> <p>The curve type will be an arc if 3 UVs are selected, otherwise it will be an \"edit point\" (EP) curve.</p> <p>Parameters:</p> <ul> <li> <code>selected_uvs</code>               (<code>str</code>, default:                   <code>()</code> )           \u2013            <p>A list of UVs to create the curve from. If not provided, the current selection will be used.</p> </li> <li> <code>distribution_type</code>               (<code>str</code>, default:                   <code>maya_zen_tools.options.DistributionType.UNIFORM</code> )           \u2013            <p>How to distribute UVs along the curve. UNIFORM: Distribute UVs equidistant along the curve. PROPORTIONAL: Distribute UVs such that edge lengths are     proportional to their original lengths in relation the sum     of all edge lengths.</p> </li> <li> <code>use_selection_order</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If <code>True</code>, the curve will be created in selection order, otherwise, it will be automatically sorted.</p> </li> <li> <code>close</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If <code>True</code>, the curve distribution will form a closed loop, with the first selected vertex also being the last.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[str, ...]</code>           \u2013            <p>A tuple of the affected UVs.</p> </li> </ul> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def curve_distribute_uvs(\n    *selected_uvs: str,\n    distribution_type: str = options.DistributionType.UNIFORM,\n    use_selection_order: bool = False,\n    close: bool = False,\n) -&gt; tuple[str, ...]:\n    \"\"\"\n    Create a curve passing between selected UVs and distribute all\n    UVs on the edge loop segment along the curve.\n\n    The curve type will be an *arc* if 3 UVs are selected, otherwise it\n    will be an \"edit point\" (EP) curve.\n\n    Parameters:\n        selected_uvs: A list of UVs to create the curve from. If not\n            provided, the current selection will be used.\n        distribution_type: How to distribute UVs along the curve.\n            UNIFORM: Distribute UVs equidistant along the curve.\n            PROPORTIONAL: Distribute UVs such that edge lengths are\n                proportional to their original lengths in relation the sum\n                of all edge lengths.\n        use_selection_order: If `True`, the curve will be created in selection\n            order, otherwise, it will be automatically sorted.\n        close: If `True`, the curve distribution will form a closed loop, with\n            the first selected vertex also being the last.\n\n    Returns:\n        A tuple of the affected UVs.\n    \"\"\"\n    set_wait_cursor_state(True)\n    try:\n        if use_selection_order:\n            # Check to make sure that selection order is being tracked, and\n            # fall back to automatic sorting if not.\n            use_selection_order = cmds.selectPref(\n                trackSelectionOrder=True, query=True\n            )\n        if not use_selection_order:\n            close = False\n        # Store the original selection\n        selection: list[str] = cmds.ls(orderedSelection=True, flatten=True)\n        # If UVs are not explicitly passed, we get them by\n        # flattening the current selection of UVs\n        selected_uvs = selected_uvs or tuple(iter_selected_components(\"map\"))\n        # Raise an error if selected UVs span more than one mesh\n        get_components_shape(selected_uvs)\n        if not use_selection_order:\n            # If we have opted not to use selection order, or are unable to\n            # because it is not being tracked, we fall back to auomatic sorting\n            selected_uvs = tuple(iter_sorted_uvs(selected_uvs))\n        # Create the Curve\n        curve_transform: str\n        curve_shape: str\n        curve_transform, curve_shape = _create_curve_from_uvs(\n            selected_uvs, close=close\n        )\n        # Distribute UVs Along the Curve\n        uvs: tuple[str, ...] = _distribute_uvs_loop_along_curve(\n            ((*selected_uvs, selected_uvs[0]) if close else selected_uvs),\n            curve_shape,\n            distribution_type=distribution_type,\n        )\n        edges: tuple[str, ...] = tuple(iter_uvs_edges(uvs))\n        # Cleanup the curve and history\n        cmds.delete(curve_shape, constructionHistory=True)\n        cmds.delete(curve_transform, constructionHistory=True)\n        cmds.delete(curve_transform)\n        cmds.select(*selection, *uvs, add=True)\n    finally:\n        set_wait_cursor_state(False)\n    return edges\n</code></pre>"},{"location":"api/loop/#maya_zen_tools.loop.show_curve_distribute_vertices_options","title":"show_curve_distribute_vertices_options","text":"<pre><code>show_curve_distribute_vertices_options() -&gt; None\n</code></pre> <p>Show a window with options to use when executing <code>curve_distribute_vertices</code>.</p> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def show_curve_distribute_vertices_options() -&gt; None:\n    \"\"\"\n    Show a window with options to use when executing\n    `curve_distribute_vertices`.\n    \"\"\"\n    # Get saved options\n    get_option: Callable[[str], str | int | float | None] = partial(\n        options.get_tool_option, \"curve_distribute_vertices\"\n    )\n    # Create the window\n    if cmds.window(WINDOW, exists=True):\n        cmds.deleteUI(WINDOW)\n    if cmds.windowPref(WINDOW, exists=True):\n        cmds.windowPref(WINDOW, remove=True)\n    cmds.window(\n        WINDOW,\n        width=425,\n        height=165,\n        title=f\"ZenTools: {CURVE_DISTRIBUTE_BETWEEN_VERTICES_LABEL} Options\",\n        resizeToFitChildren=True,\n        sizeable=False,\n    )\n    column_layout: str = cmds.columnLayout(\n        adjustableColumn=True,\n        parent=WINDOW,\n        columnAlign=\"left\",\n        columnOffset=(\"both\", 10),\n    )\n    selected: int = 1\n    with contextlib.suppress(ValueError):\n        selected = (\"UNIFORM\", \"PROPORTIONAL\").index(\n            get_option(  # type: ignore\n                \"distribution_type\", options.DistributionType.UNIFORM\n            )\n        ) + 1\n    cmds.radioButtonGrp(\n        label=\"Distribution Type:\",\n        parent=column_layout,\n        numberOfRadioButtons=2,\n        label1=\"Uniform\",\n        label2=\"Proportional\",\n        columnAlign=(1, \"left\"),\n        changeCommand1=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'curve_distribute_vertices', 'distribution_type', \"\n            \"'UNIFORM')\"\n        ),\n        changeCommand2=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'curve_distribute_vertices', 'distribution_type', \"\n            \"'PROPORTIONAL')\"\n        ),\n        select=selected,\n        height=30,\n    )\n    cmds.separator(parent=column_layout)\n    use_selection_order: bool = get_option(  # type: ignore\n        \"use_selection_order\", False\n    )\n    cmds.checkBox(\n        label=\"Use Selection Order\",\n        parent=column_layout,\n        value=use_selection_order,  # type: ignore\n        onCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'curve_distribute_vertices', 'use_selection_order', \"\n            \"True)\\n\"\n            \"from maya import cmds\\n\"\n            f\"cmds.disable('{CLOSE_CHECKBOX}', value=False)\"\n        ),\n        offCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'curve_distribute_vertices', 'use_selection_order', \"\n            \"False)\\n\"\n            \"from maya import cmds\\n\"\n            f\"cmds.disable('{CLOSE_CHECKBOX}', value=True)\"\n        ),\n        height=30,\n    )\n    cmds.separator(parent=column_layout)\n    cmds.checkBox(\n        label=\"Create Deformer\",\n        parent=column_layout,\n        value=get_option(\"create_deformer\", False),  # type: ignore\n        onCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'curve_distribute_vertices', 'create_deformer', \"\n            \"True)\"\n        ),\n        offCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'curve_distribute_vertices', 'create_deformer', \"\n            \"False)\"\n        ),\n        height=30,\n    )\n    cmds.separator(parent=column_layout)\n    cmds.checkBox(\n        CLOSE_CHECKBOX,\n        label=\"Close\",\n        parent=column_layout,\n        value=get_option(\"close\", False),  # type: ignore\n        onCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'curve_distribute_vertices', 'close', \"\n            \"True)\"\n        ),\n        offCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'curve_distribute_vertices', 'close', \"\n            \"False)\"\n        ),\n        height=30,\n    )\n    if not use_selection_order:\n        cmds.disable(CLOSE_CHECKBOX, value=True)\n    cmds.button(\n        label=\"Distribute\",\n        parent=column_layout,\n        command=(\n            \"from maya_zen_tools import loop\\n\"\n            \"from maya import cmds\\n\"\n            \"loop.do_curve_distribute_vertices()\\n\"\n            f\"cmds.deleteUI('{WINDOW}')\"\n        ),\n    )\n    cmds.text(\n        label=\"\",\n        parent=column_layout,\n    )\n    cmds.showWindow(WINDOW)\n</code></pre>"},{"location":"api/loop/#maya_zen_tools.loop.do_curve_distribute_vertices","title":"do_curve_distribute_vertices","text":"<pre><code>do_curve_distribute_vertices() -&gt; None\n</code></pre> <p>Execute <code>curve_distribute_vertices</code>, getting arguments from the UI or saved options.</p> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def do_curve_distribute_vertices() -&gt; None:\n    \"\"\"\n    Execute `curve_distribute_vertices`, getting arguments from the UI or\n    saved options.\n    \"\"\"\n    kwargs: dict[str, float | bool | str] = options.get_tool_options(\n        \"curve_distribute_vertices\"\n    )\n    curve_distribute_vertices(**kwargs)  # type: ignore\n</code></pre>"},{"location":"api/loop/#maya_zen_tools.loop.show_curve_distribute_uvs_options","title":"show_curve_distribute_uvs_options","text":"<pre><code>show_curve_distribute_uvs_options() -&gt; None\n</code></pre> <p>Show a window with options to use when executing <code>curve_distribute_uvs</code>.</p> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def show_curve_distribute_uvs_options() -&gt; None:\n    \"\"\"\n    Show a window with options to use when executing\n    `curve_distribute_uvs`.\n    \"\"\"\n    # Get saved options\n    get_option: Callable[[str], str | int | float | None] = partial(\n        options.get_tool_option, \"curve_distribute_uvs\"\n    )\n    # Create the window\n    if cmds.window(WINDOW, exists=True):\n        cmds.deleteUI(WINDOW)\n    if cmds.windowPref(WINDOW, exists=True):\n        cmds.windowPref(WINDOW, remove=True)\n    cmds.window(\n        WINDOW,\n        width=390,\n        height=130,\n        title=f\"ZenTools: {CURVE_DISTRIBUTE_BETWEEN_UVS_LABEL} Options\",\n        resizeToFitChildren=True,\n        sizeable=False,\n    )\n    column_layout: str = cmds.columnLayout(\n        adjustableColumn=True,\n        parent=WINDOW,\n        columnAlign=\"left\",\n        columnOffset=(\"both\", 10),\n    )\n    selected: int = 1\n    with contextlib.suppress(ValueError):\n        selected = (\"UNIFORM\", \"PROPORTIONAL\").index(\n            get_option(  # type: ignore\n                \"distribution_type\", options.DistributionType.UNIFORM\n            )\n        ) + 1\n    cmds.radioButtonGrp(\n        label=\"Distribution Type:\",\n        parent=column_layout,\n        numberOfRadioButtons=2,\n        label1=\"Uniform\",\n        label2=\"Proportional\",\n        columnAlign=(1, \"left\"),\n        changeCommand1=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'curve_distribute_uvs', 'distribution_type', \"\n            \"'UNIFORM')\"\n        ),\n        changeCommand2=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'curve_distribute_uvs', 'distribution_type', \"\n            \"'PROPORTIONAL')\"\n        ),\n        select=selected,\n        height=30,\n    )\n    cmds.separator(parent=column_layout)\n    use_selection_order: bool = get_option(  # type: ignore\n        \"use_selection_order\", False\n    )\n    cmds.checkBox(\n        label=\"Use Selection Order\",\n        parent=column_layout,\n        value=use_selection_order,  # type: ignore\n        onCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'curve_distribute_uvs', 'use_selection_order', \"\n            \"True)\\n\"\n            \"from maya import cmds\\n\"\n            f\"cmds.disable('{CLOSE_CHECKBOX}', value=False)\"\n        ),\n        offCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'curve_distribute_uvs', 'use_selection_order', \"\n            \"False)\\n\"\n            \"from maya import cmds\\n\"\n            f\"cmds.disable('{CLOSE_CHECKBOX}', value=True)\"\n        ),\n        height=30,\n    )\n    cmds.separator(parent=column_layout)\n    cmds.checkBox(\n        CLOSE_CHECKBOX,\n        label=\"Close\",\n        parent=column_layout,\n        value=get_option(\"close\", False),  # type: ignore\n        onCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'curve_distribute_uvs', 'close', \"\n            \"True)\"\n        ),\n        offCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'curve_distribute_uvs', 'close', \"\n            \"False)\"\n        ),\n        height=30,\n    )\n    if not use_selection_order:\n        cmds.disable(CLOSE_CHECKBOX, value=True)\n    cmds.button(\n        label=\"Distribute\",\n        parent=column_layout,\n        command=(\n            \"from maya_zen_tools import loop\\n\"\n            \"from maya import cmds\\n\"\n            \"loop.do_curve_distribute_uvs()\\n\"\n            f\"cmds.deleteUI('{WINDOW}')\"\n        ),\n    )\n    cmds.text(\n        label=\"\",\n        parent=column_layout,\n    )\n    cmds.showWindow(WINDOW)\n</code></pre>"},{"location":"api/loop/#maya_zen_tools.loop.do_curve_distribute_uvs","title":"do_curve_distribute_uvs","text":"<pre><code>do_curve_distribute_uvs() -&gt; None\n</code></pre> <p>Execute <code>curve_distribute_uvs</code>, getting arguments from the UI or saved options.</p> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def do_curve_distribute_uvs() -&gt; None:\n    \"\"\"\n    Execute `curve_distribute_uvs`, getting arguments from the UI or\n    saved options.\n    \"\"\"\n    kwargs: dict[str, float | bool | str] = options.get_tool_options(\n        \"curve_distribute_uvs\"\n    )\n    curve_distribute_uvs(**kwargs)  # type: ignore\n</code></pre>"},{"location":"api/loop/#maya_zen_tools.loop.show_select_edges_between_vertices_options","title":"show_select_edges_between_vertices_options","text":"<pre><code>show_select_edges_between_vertices_options() -&gt; None\n</code></pre> <p>Show a window with options to use when executing <code>select_edges_between_vertices</code>.</p> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def show_select_edges_between_vertices_options() -&gt; None:\n    \"\"\"\n    Show a window with options to use when executing\n    `select_edges_between_vertices`.\n    \"\"\"\n    # Get saved options\n    get_option: Callable[[str], str | int | float | None] = partial(\n        options.get_tool_option, \"select_edges_between_vertices\"\n    )\n    # Create the window\n    if cmds.window(WINDOW, exists=True):\n        cmds.deleteUI(WINDOW)\n    if cmds.windowPref(WINDOW, exists=True):\n        cmds.windowPref(WINDOW, remove=True)\n    cmds.window(\n        WINDOW,\n        width=400,\n        height=100,\n        title=f\"ZenTools: {SELECT_EDGES_BETWEEN_VERTICES_LABEL} Options\",\n        resizeToFitChildren=True,\n        sizeable=False,\n    )\n    column_layout: str = cmds.columnLayout(\n        adjustableColumn=True,\n        parent=WINDOW,\n        columnAlign=\"left\",\n        columnOffset=(\"both\", 10),\n    )\n    use_selection_order: bool = get_option(  # type: ignore\n        \"use_selection_order\", False\n    )\n    cmds.checkBox(\n        label=\"Use Selection Order\",\n        parent=column_layout,\n        value=use_selection_order,\n        onCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'select_edges_between_vertices', 'use_selection_order', \"\n            \"True)\\n\"\n            \"from maya import cmds\\n\"\n            f\"cmds.disable('{CLOSE_CHECKBOX}', value=False)\"\n        ),\n        offCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'select_edges_between_vertices', 'use_selection_order', \"\n            \"False)\\n\"\n            \"from maya import cmds\\n\"\n            f\"cmds.disable('{CLOSE_CHECKBOX}', value=True)\"\n        ),\n        height=30,\n    )\n    cmds.separator(parent=column_layout)\n    cmds.checkBox(\n        CLOSE_CHECKBOX,\n        label=\"Close\",\n        parent=column_layout,\n        value=get_option(\"close\", False),  # type: ignore\n        onCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'select_edges_between_vertices', 'close', \"\n            \"True)\"\n        ),\n        offCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'select_edges_between_vertices', 'close', \"\n            \"False)\"\n        ),\n        height=30,\n    )\n    if not use_selection_order:\n        cmds.disable(CLOSE_CHECKBOX, value=True)\n    cmds.button(\n        label=\"Select\",\n        parent=column_layout,\n        command=(\n            \"from maya_zen_tools import loop\\n\"\n            \"from maya import cmds\\n\"\n            \"loop.do_select_edges_between_vertices()\\n\"\n            f\"cmds.deleteUI('{WINDOW}')\"\n        ),\n    )\n    cmds.text(\n        label=\"\",\n        parent=column_layout,\n    )\n    cmds.showWindow(WINDOW)\n</code></pre>"},{"location":"api/loop/#maya_zen_tools.loop.do_select_edges_between_vertices","title":"do_select_edges_between_vertices","text":"<pre><code>do_select_edges_between_vertices() -&gt; None\n</code></pre> <p>Execute <code>curve_distribute_vertices</code>, getting arguments from the UI or saved options.</p> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def do_select_edges_between_vertices() -&gt; None:\n    \"\"\"\n    Execute `curve_distribute_vertices`, getting arguments from the UI or\n    saved options.\n    \"\"\"\n    kwargs: dict[str, float | bool | str] = options.get_tool_options(\n        \"select_edges_between_vertices\"\n    )\n    select_edges_between_vertices(**kwargs)  # type: ignore\n</code></pre>"},{"location":"api/loop/#maya_zen_tools.loop.show_select_edges_between_uvs_options","title":"show_select_edges_between_uvs_options","text":"<pre><code>show_select_edges_between_uvs_options() -&gt; None\n</code></pre> <p>Show a window with options to use when executing <code>select_edges_between_uvs</code>.</p> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def show_select_edges_between_uvs_options() -&gt; None:\n    \"\"\"\n    Show a window with options to use when executing\n    `select_edges_between_uvs`.\n    \"\"\"\n    # Get saved options\n    get_option: Callable[[str], str | int | float | None] = partial(\n        options.get_tool_option, \"select_edges_between_uvs\"\n    )\n    # Create the window\n    if cmds.window(WINDOW, exists=True):\n        cmds.deleteUI(WINDOW)\n    if cmds.windowPref(WINDOW, exists=True):\n        cmds.windowPref(WINDOW, remove=True)\n    cmds.window(\n        WINDOW,\n        width=400,\n        height=100,\n        title=f\"ZenTools: {SELECT_EDGES_BETWEEN_UVS_LABEL} Options\",\n        resizeToFitChildren=True,\n        sizeable=False,\n    )\n    column_layout: str = cmds.columnLayout(\n        adjustableColumn=True,\n        parent=WINDOW,\n        columnAlign=\"left\",\n        columnOffset=(\"both\", 10),\n    )\n    use_selection_order: bool = get_option(  # type: ignore\n        \"use_selection_order\", False\n    )\n    cmds.checkBox(\n        label=\"Use Selection Order\",\n        parent=column_layout,\n        value=use_selection_order,\n        onCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'select_edges_between_uvs', 'use_selection_order', \"\n            \"True)\\n\"\n            \"from maya import cmds\\n\"\n            f\"cmds.disable('{CLOSE_CHECKBOX}', value=False)\"\n        ),\n        offCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'select_edges_between_uvs', 'use_selection_order', \"\n            \"False)\\n\"\n            \"from maya import cmds\\n\"\n            f\"cmds.disable('{CLOSE_CHECKBOX}', value=True)\"\n        ),\n        height=30,\n    )\n    cmds.separator(parent=column_layout)\n    cmds.checkBox(\n        CLOSE_CHECKBOX,\n        label=\"Close\",\n        parent=column_layout,\n        value=get_option(\"close\", False),  # type: ignore\n        onCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'select_edges_between_uvs', 'close', \"\n            \"True)\"\n        ),\n        offCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'select_edges_between_uvs', 'close', \"\n            \"False)\"\n        ),\n        height=30,\n    )\n    if not use_selection_order:\n        cmds.disable(CLOSE_CHECKBOX, value=True)\n    cmds.button(\n        label=\"Select\",\n        parent=column_layout,\n        command=(\n            \"from maya_zen_tools import loop\\n\"\n            \"from maya import cmds\\n\"\n            \"loop.do_select_edges_between_uvs()\\n\"\n            f\"cmds.deleteUI('{WINDOW}')\"\n        ),\n    )\n    cmds.showWindow(WINDOW)\n</code></pre>"},{"location":"api/loop/#maya_zen_tools.loop.do_select_edges_between_uvs","title":"do_select_edges_between_uvs","text":"<pre><code>do_select_edges_between_uvs() -&gt; None\n</code></pre> <p>Execute <code>curve_distribute_uvs</code>, getting arguments from the UI or saved options.</p> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def do_select_edges_between_uvs() -&gt; None:\n    \"\"\"\n    Execute `curve_distribute_uvs`, getting arguments from the UI or\n    saved options.\n    \"\"\"\n    kwargs: dict[str, float | bool | str] = options.get_tool_options(\n        \"select_edges_between_uvs\"\n    )\n    select_edges_between_uvs(**kwargs)  # type: ignore\n</code></pre>"},{"location":"api/loop/#maya_zen_tools.loop.show_select_between_uvs_options","title":"show_select_between_uvs_options","text":"<pre><code>show_select_between_uvs_options() -&gt; None\n</code></pre> <p>Show a window with options to use when executing <code>select_between_uvs</code>.</p> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def show_select_between_uvs_options() -&gt; None:\n    \"\"\"\n    Show a window with options to use when executing\n    `select_between_uvs`.\n    \"\"\"\n    # Get saved options\n    get_option: Callable[[str], str | int | float | None] = partial(\n        options.get_tool_option, \"select_between_uvs\"\n    )\n    # Create the window\n    if cmds.window(WINDOW, exists=True):\n        cmds.deleteUI(WINDOW)\n    cmds.window(\n        WINDOW,\n        width=380,\n        height=100,\n        title=f\"ZenTools: {SELECT_UVS_BETWEEN_UVS_LABEL} Options\",\n        resizeToFitChildren=True,\n        sizeable=False,\n    )\n    column_layout: str = cmds.columnLayout(\n        adjustableColumn=True,\n        parent=WINDOW,\n        columnAlign=\"left\",\n        columnOffset=(\"both\", 10),\n    )\n    use_selection_order: bool = get_option(  # type: ignore\n        \"use_selection_order\", False\n    )\n    cmds.checkBox(\n        label=\"Use Selection Order\",\n        parent=column_layout,\n        value=use_selection_order,\n        onCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'select_between_uvs', 'use_selection_order', \"\n            \"True)\\n\"\n            \"from maya import cmds\\n\"\n            f\"cmds.disable('{CLOSE_CHECKBOX}', value=False)\"\n        ),\n        offCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'select_between_uvs', 'use_selection_order', \"\n            \"False)\\n\"\n            \"from maya import cmds\\n\"\n            f\"cmds.disable('{CLOSE_CHECKBOX}', value=True)\"\n        ),\n        height=30,\n    )\n    cmds.separator(parent=column_layout)\n    cmds.checkBox(\n        CLOSE_CHECKBOX,\n        label=\"Close\",\n        parent=column_layout,\n        value=get_option(\"close\", False),  # type: ignore\n        onCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'select_between_uvs', 'close', \"\n            \"True)\"\n        ),\n        offCommand=(\n            \"from maya_zen_tools import options\\n\"\n            \"options.set_tool_option(\"\n            \"'select_between_uvs', 'close', \"\n            \"False)\"\n        ),\n        height=30,\n    )\n    if not use_selection_order:\n        cmds.disable(CLOSE_CHECKBOX, value=True)\n    cmds.button(\n        label=\"Select\",\n        parent=column_layout,\n        command=(\n            \"from maya_zen_tools import loop\\n\"\n            \"from maya import cmds\\n\"\n            \"loop.do_select_between_uvs()\\n\"\n            f\"cmds.deleteUI('{WINDOW}')\"\n        ),\n    )\n    cmds.text(\n        label=\"\",\n        parent=column_layout,\n    )\n    cmds.showWindow(WINDOW)\n</code></pre>"},{"location":"api/loop/#maya_zen_tools.loop.do_select_between_uvs","title":"do_select_between_uvs","text":"<pre><code>do_select_between_uvs() -&gt; None\n</code></pre> <p>Execute <code>curve_distribute_uvs</code>, getting arguments from the UI or saved options.</p> Source code in <code>src/maya_zen_tools/loop.py</code> <pre><code>def do_select_between_uvs() -&gt; None:\n    \"\"\"\n    Execute `curve_distribute_uvs`, getting arguments from the UI or\n    saved options.\n    \"\"\"\n    kwargs: dict[str, float | bool | str] = options.get_tool_options(\n        \"select_between_uvs\"\n    )\n    select_between_uvs(**kwargs)  # type: ignore\n</code></pre>"},{"location":"api/menu/","title":"menu","text":""},{"location":"api/menu/#maya_zen_tools.menu","title":"maya_zen_tools.menu","text":""},{"location":"api/menu/#maya_zen_tools.menu.show_about","title":"show_about","text":"<pre><code>show_about() -&gt; None\n</code></pre> <p>Show a window with information about, and button to update/upgrade or uninstall, ZenTools.</p> Source code in <code>src/maya_zen_tools/menu.py</code> <pre><code>def show_about() -&gt; None:\n    \"\"\"\n    Show a window with information about, and button to update/upgrade or\n    uninstall, ZenTools.\n    \"\"\"\n    if cmds.window(ABOUT_WINDOW, exists=True):\n        cmds.deleteUI(ABOUT_WINDOW)\n    if cmds.windowPref(ABOUT_WINDOW, exists=True):\n        cmds.windowPref(ABOUT_WINDOW, remove=True)\n    cmds.window(\n        ABOUT_WINDOW,\n        title=\"About ZenTools\",\n        height=105,\n        width=237,\n        resizeToFitChildren=True,\n        sizeable=False,\n    )\n    column_layout: str = cmds.columnLayout(\n        parent=ABOUT_WINDOW,\n        columnOffset=(\"both\", 10),\n    )\n    version: str = \"\"\n    with contextlib.suppress(Exception):\n        version = get_maya_zen_tools_package_info()[\"version\"]\n    cmds.text(\n        label=(\n            f\"\\nZenTools {version} \u00a9 \"\n            f\"{datetime.now(tz=timezone.utc).year} by David Belais\\n\"\n        ).replace(\"  \", \" \"),\n        align=\"left\",\n        parent=column_layout,\n    )\n    debugging: bool = get_tool_option(  # type: ignore\n        \"general\", \"debugging\", False\n    )\n    # If debugging is enabled, or if ZenTools is installed as an editable\n    # package, show an option to enable/disable debugging\n    with contextlib.suppress(Exception):\n        package_info: dict[str, str] = get_maya_zen_tools_package_info()\n        if debugging or (\n            package_info.get(\"editable_project_location\") is not None\n        ):\n            cmds.checkBox(\n                label=\"Enable Debugging\",\n                parent=column_layout,\n                value=debugging,  # type: ignore\n                onCommand=(\n                    \"from maya_zen_tools import options\\n\"\n                    \"options.set_tool_option(\"\n                    \"'general', 'debugging', \"\n                    \"True)\\n\"\n                    \"from maya_zen_tools import _utilities\\n\"\n                    \"_utilities.reload()\"\n                ),\n                offCommand=(\n                    \"from maya_zen_tools import options\\n\"\n                    \"options.set_tool_option(\"\n                    \"'general', 'debugging', \"\n                    \"False)\\n\"\n                    \"from maya_zen_tools import _utilities\\n\"\n                    \"_utilities.reload()\"\n                ),\n                height=30,\n            )\n    row_layout = cmds.rowLayout(\n        parent=column_layout,\n        numberOfColumns=2,\n    )\n    cmds.button(\n        label=\"Update ZenTools\",\n        parent=row_layout,\n        command=(\n            \"from maya import cmds\\n\"\n            \"from maya_zen_tools import upgrade\\nupgrade.main()\\n\"\n            f\"cmds.deleteUI('{ABOUT_WINDOW}')\"\n        ),\n    )\n    cmds.button(\n        label=\"Uninstall ZenTools\",\n        parent=row_layout,\n        command=(\n            \"from maya import cmds\\n\"\n            \"from maya_zen_tools import _ui\\n\"\n            \"_ui.show_confirmation_dialogue(\"\n            f'\"Are you certain you want to uninstall ZenTools?\", '\n            f'yes_command=\"from maya_zen_tools import uninstall\\\\n'\n            'uninstall.main()\", title=\"Uninstall ZenTools?\")\\n'\n            f\"cmds.deleteUI('{ABOUT_WINDOW}')\"\n        ),\n    )\n    cmds.text(\n        label=\"\",\n        parent=column_layout,\n    )\n    cmds.showWindow(ABOUT_WINDOW)\n</code></pre>"},{"location":"api/menu/#maya_zen_tools.menu.create_menu","title":"create_menu","text":"<pre><code>create_menu() -&gt; None\n</code></pre> <p>Create the main ZenTools menu</p> Source code in <code>src/maya_zen_tools/menu.py</code> <pre><code>def create_menu() -&gt; None:\n    \"\"\"\n    Create the main ZenTools menu\n    \"\"\"\n    if cmds.menu(MENU, exists=True):\n        cmds.deleteUI(MENU)\n    cmds.menu(\n        MENU, label=\"ZenTools\", tearOff=True, visible=True, parent=MAYA_WINDOW\n    )\n    cmds.menuSet(MENU_SET, addMenu=MENU)\n    # Selection\n    cmds.menuItem(label=\"Selection\", parent=MENU, divider=True)\n    cmds.menuItem(\n        label=SELECT_EDGES_BETWEEN_VERTICES_LABEL,\n        command=(\n            \"from maya_zen_tools import loop\\n\"\n            \"loop.do_select_edges_between_vertices()\"\n        ),\n        annotation=(\n            \"Selects an edge path containing the fewest edges necessary to \"\n            \"connect selected vertices.\"\n        ),\n        parent=MENU,\n    )\n    cmds.menuItem(\n        optionBox=True,\n        command=(\n            \"from maya_zen_tools import loop\\n\"\n            \"loop.show_select_edges_between_vertices_options()\"\n        ),\n        parent=MENU,\n    )\n    cmds.menuItem(\n        label=SELECT_EDGES_BETWEEN_UVS_LABEL,\n        command=(\n            \"from maya_zen_tools import loop\\n\"\n            \"loop.do_select_edges_between_uvs()\"\n        ),\n        annotation=(\n            \"Selects an edge path containing the fewest edges necessary to \"\n            \"connect selected UVs.\"\n        ),\n        parent=MENU,\n    )\n    cmds.menuItem(\n        optionBox=True,\n        command=(\n            \"from maya_zen_tools import loop\\n\"\n            \"loop.show_select_edges_between_uvs_options()\"\n        ),\n        parent=MENU,\n    )\n    cmds.menuItem(\n        label=SELECT_UVS_BETWEEN_UVS_LABEL,\n        command=(\n            \"from maya_zen_tools import loop\\n\" \"loop.do_select_between_uvs()\"\n        ),\n        annotation=(\n            \"Selects path containing the fewest UVs necessary to \"\n            \"connect selected UVs.\"\n        ),\n        parent=MENU,\n    )\n    cmds.menuItem(\n        optionBox=True,\n        command=(\n            \"from maya_zen_tools import loop\\n\"\n            \"loop.show_select_between_uvs_options()\"\n        ),\n        parent=MENU,\n    )\n    cmds.menuItem(\n        label=\"Flood Select\",\n        command=\"from maya_zen_tools import flood\\nflood.flood_select()\",\n        annotation=(\n            \"Selected Edges will define a selection border, selected vertices \"\n            \"or faces will determine the portion of the mesh to be selected.\"\n        ),\n        parent=MENU,\n    )\n    # Modeling\n    cmds.menuItem(label=\"Modeling\", parent=MENU, divider=True)\n    cmds.menuItem(\n        label=CURVE_DISTRIBUTE_BETWEEN_VERTICES_LABEL,\n        command=(\n            \"from maya_zen_tools import loop\\n\"\n            \"loop.do_curve_distribute_vertices()\"\n        ),\n        annotation=\"Align edge loop along a curve based on vertex selection.\",\n        parent=MENU,\n    )\n    cmds.menuItem(\n        optionBox=True,\n        command=(\n            \"from maya_zen_tools import loop\\n\"\n            \"loop.show_curve_distribute_vertices_options()\"\n        ),\n        parent=MENU,\n    )\n    cmds.menuItem(\n        label=LOFT_DISTRIBUTE_VERTICES_BETWEEN_EDGES_LABEL,\n        command=(\n            \"from maya_zen_tools import loft\\n\"\n            \"loft.do_loft_distribute_vertices_between_edges()\"\n        ),\n        annotation=(\n            \"Distribute vertices between two or more parallel edge loops.\"\n        ),\n        parent=MENU,\n    )\n    cmds.menuItem(\n        optionBox=True,\n        command=(\n            \"from maya_zen_tools import loft;\"\n            \"loft.show_loft_distribute_vertices_between_edges_options()\"\n        ),\n        parent=MENU,\n    )\n    # Texturing\n    cmds.menuItem(label=\"Texturing\", parent=MENU, divider=True)\n    cmds.menuItem(\n        label=CURVE_DISTRIBUTE_BETWEEN_UVS_LABEL,\n        command=(\n            \"from maya_zen_tools import loop\\n\"\n            \"loop.do_curve_distribute_uvs()\"\n        ),\n        annotation=\"Align edge loop along a curve based on vertex selection.\",\n        parent=MENU,\n    )\n    cmds.menuItem(\n        optionBox=True,\n        command=(\n            \"from maya_zen_tools import loop\\n\"\n            \"loop.show_curve_distribute_uvs_options()\"\n        ),\n        parent=MENU,\n    )\n    cmds.menuItem(\n        label=LOFT_DISTRIBUTE_UVS_BETWEEN_EDGES_OR_UVS_LABEL,\n        command=(\n            \"from maya_zen_tools import loft\\n\"\n            \"loft.do_loft_distribute_uvs_between_edges_or_uvs()\"\n        ),\n        annotation=(\"Distribute UVs between two or more parallel edge loops.\"),\n        parent=MENU,\n    )\n    cmds.menuItem(\n        optionBox=True,\n        command=(\n            \"from maya_zen_tools import loft;\"\n            \"loft.show_loft_distribute_uvs_between_edges_or_uvs_options()\"\n        ),\n        parent=MENU,\n    )\n    cmds.menuItem(label=\"Help\", parent=MENU, divider=True)\n    cmds.menuItem(\n        label=\"About ZenTools\",\n        command=(\n            \"import maya_zen_tools.menu\\nmaya_zen_tools.menu.show_about()\"\n        ),\n        parent=MENU,\n    )\n    cmds.menuItem(\n        label=\"ZenTools Documentation\",\n        command=(\n            \"import webbrowser\\n\"\n            \"webbrowser.open('https://maya-zen-tools.enorganic.org')\"\n        ),\n        parent=MENU,\n    )\n    cmds.menuItem(\n        label=\"Reset ZenTools Options\",\n        command=(\n            \"import maya_zen_tools.options\\nmaya_zen_tools.options.reset()\"\n        ),\n        parent=MENU,\n    )\n    if get_tool_option(\"general\", \"debugging\", False):\n        # Only show these menu items if `maya-zen-tools` is an\n        # editable installation (indicating it is installed for\n        cmds.menuItem(label=\"Debugging\", parent=MENU, divider=True)\n        # development/testing)\n        cmds.menuItem(\n            label=CREATE_CURVE_FROM_EDGES_LABEL,\n            command=(\n                \"from maya_zen_tools import loop\\n\"\n                \"loop.create_curve_from_edges()\"\n            ),\n            annotation=\"Create a curve from a contiguous edge selection.\",\n            parent=MENU,\n        )\n        cmds.menuItem(\n            label=CREATE_UV_CURVE_FROM_EDGES_LABEL,\n            command=(\n                \"from maya_zen_tools import loop\\n\"\n                \"loop.create_uv_curve_from_edges()\"\n            ),\n            annotation=(\n                \"Create a curve from a contiguous edge selection in UV \"\n                \"space\"\n            ),\n            parent=MENU,\n        )\n        cmds.menuItem(\n            label=\"Reload ZenTools\",\n            command=(\n                \"from maya_zen_tools import _utilities\\n_utilities.reload()\"\n            ),\n            parent=MENU,\n        )\n</code></pre>"},{"location":"api/options/","title":"options","text":""},{"location":"api/options/#maya_zen_tools.options","title":"maya_zen_tools.options","text":""},{"location":"api/options/#maya_zen_tools.options.DistributionType","title":"DistributionType","text":"<p>An enumeration of the different types of distribution that can be used when distributing vertices.</p> <p>Attributes:</p> <ul> <li> <code>UNIFORM</code>               (<code>str</code>)           \u2013            <p>Distribute vertices equidistant along the curve or surface.</p> </li> <li> <code>PROPORTIONAL</code>               (<code>str</code>)           \u2013            <p>Distribute vertices such that edge lengths are proportional to their original lengths in relation the sum of all edge lengths.</p> </li> </ul> Source code in <code>src/maya_zen_tools/options.py</code> <pre><code>class DistributionType:\n    \"\"\"\n    An enumeration of the different types of distribution that can be used\n    when distributing vertices.\n\n    Attributes:\n        UNIFORM: Distribute vertices equidistant along the curve or surface.\n        PROPORTIONAL: Distribute vertices such that edge lengths are\n            proportional to their original lengths in relation the sum\n            of all edge lengths.\n    \"\"\"\n\n    UNIFORM: str = \"UNIFORM\"\n    PROPORTIONAL: str = \"PROPORTIONAL\"\n</code></pre>"},{"location":"api/options/#maya_zen_tools.options.get_tool_options","title":"get_tool_options","text":"<pre><code>get_tool_options(\n    tool: str,\n) -&gt; dict[str, bool | str | int | float]\n</code></pre> <p>Get all options for a tool.</p> Source code in <code>src/maya_zen_tools/options.py</code> <pre><code>def get_tool_options(\n    tool: str,\n) -&gt; dict[str, bool | str | int | float]:\n    \"\"\"\n    Get all options for a tool.\n    \"\"\"\n    return _options.gets(tool)\n</code></pre>"},{"location":"api/options/#maya_zen_tools.options.get_tool_option","title":"get_tool_option","text":"<pre><code>get_tool_option(\n    tool: str,\n    option: str,\n    default: float | str | bool | None = None,\n) -&gt; bool | str | float | None\n</code></pre> <p>Get a single option for a tool.</p> Source code in <code>src/maya_zen_tools/options.py</code> <pre><code>def get_tool_option(\n    tool: str, option: str, default: float | str | bool | None = None\n) -&gt; bool | str | float | None:\n    \"\"\"\n    Get a single option for a tool.\n    \"\"\"\n    return _options.get(tool, option, default)\n</code></pre>"},{"location":"api/options/#maya_zen_tools.options.set_tool_options","title":"set_tool_options","text":"<pre><code>set_tool_options(\n    tool: str,\n    options_values: dict[str, bool | str | int | float],\n) -&gt; None\n</code></pre> <p>Set all options for a tool.</p> Source code in <code>src/maya_zen_tools/options.py</code> <pre><code>def set_tool_options(\n    tool: str, options_values: dict[str, bool | str | int | float]\n) -&gt; None:\n    \"\"\"\n    Set all options for a tool.\n    \"\"\"\n    _options.sets(tool, options_values)\n</code></pre>"},{"location":"api/options/#maya_zen_tools.options.set_tool_option","title":"set_tool_option","text":"<pre><code>set_tool_option(\n    tool: str, option: str, value: bool | float | str\n) -&gt; None\n</code></pre> <p>Set a tool option.</p> Source code in <code>src/maya_zen_tools/options.py</code> <pre><code>def set_tool_option(tool: str, option: str, value: bool | float | str) -&gt; None:\n    \"\"\"\n    Set a tool option.\n    \"\"\"\n    _options.set(tool, option, value)\n</code></pre>"},{"location":"api/startup/","title":"startup","text":""},{"location":"api/startup/#maya_zen_tools.startup","title":"maya_zen_tools.startup","text":"<p>This module is designed to be imported at Maya startup, and should be added to your userSetup.py script by running <code>mayapy -m maya_zen_tools.install</code>.</p>"},{"location":"api/startup/#maya_zen_tools.startup.set_selection_priority","title":"set_selection_priority","text":"<pre><code>set_selection_priority() -&gt; None\n</code></pre> <p>This sets selection priority needed for manipulating deformers effectively</p> Source code in <code>src/maya_zen_tools/startup.py</code> <pre><code>def set_selection_priority() -&gt; None:\n    \"\"\"\n    This sets selection priority needed for manipulating deformers effectively\n    \"\"\"\n    surface_selection_priority: int = (\n        cmds.selectPriority(\n            query=True,\n            nurbsSurface=True,\n        )\n        or 0\n    )\n    curve_selection_priority: int = (\n        cmds.selectPriority(\n            query=True,\n            nurbsCurve=True,\n        )\n        or 0\n    )\n    polymesh_selection_priority: int = (\n        cmds.selectPriority(\n            query=True,\n            polymesh=True,\n        )\n        or 0\n    )\n    locator_selection_priority: int = (\n        cmds.selectPriority(\n            query=True,\n            locatorXYZ=True,\n        )\n        or 0\n    )\n    # Surface selection should be higher priority than polymesh selection\n    if surface_selection_priority &lt;= polymesh_selection_priority:\n        surface_selection_priority = polymesh_selection_priority + 1\n        cmds.selectPriority(\n            nurbsSurface=surface_selection_priority,\n        )\n    # Curve selection should be higher priority than surface selection\n    if curve_selection_priority &lt;= surface_selection_priority:\n        curve_selection_priority = surface_selection_priority + 1\n        cmds.selectPriority(\n            nurbsCurve=curve_selection_priority,\n        )\n    # Locator selection priority should be higher than curve selection\n    if locator_selection_priority &lt;= curve_selection_priority:\n        locator_selection_priority = curve_selection_priority + 1\n        cmds.selectPriority(\n            locatorXYZ=locator_selection_priority,\n        )\n</code></pre>"},{"location":"api/startup/#maya_zen_tools.startup.main","title":"main","text":"<pre><code>main() -&gt; None\n</code></pre> <p>The main entry point for <code>maya-zen-tools startup</code>.</p> Source code in <code>src/maya_zen_tools/startup.py</code> <pre><code>def main() -&gt; None:\n    \"\"\"\n    The main entry point for `maya-zen-tools startup`.\n    \"\"\"\n    # Don't raise errors if the upgrade fails, just continue to use the\n    # installed version\n    with contextlib.suppress(Exception):\n        upgrade()\n    # Set selection preferences to track selection order\n    cmds.selectPref(\n        trackSelectionOrder=True,\n    )\n    set_selection_priority()\n    create_menu()\n</code></pre>"},{"location":"modeling/curve-distribute-between-vertices/","title":"Curve Distribute Between Vertices","text":""},{"location":"modeling/curve-distribute-between-vertices/#default-options","title":"Default Options","text":"<p>With the default options, \"Curve Distribute Between Vertices\" will distribute vertices forming an edge path between your selected vertices along a (dynamically created and not retained) NURBS curve passing between the vertices you've selected:</p> <p></p> <p>Note: The vertices selected adhere to the same logic as Select Edges Between Vertices.</p>"},{"location":"modeling/curve-distribute-between-vertices/#proportional-distribution","title":"Proportional Distribution","text":"<p>The default distribution type for this tool is \"Uniform\", however you can select \"Proportional\" distribution in order to retain the same relative spacing between the redistributed vertices:</p> <p></p>"},{"location":"modeling/curve-distribute-between-vertices/#use-selection-order","title":"Use Selection Order","text":"<p>If your selected vertices form a path with multiple directional changes, you'll want to check the \"Use Selection Order\" option for the most predictable results:</p> <p></p>"},{"location":"modeling/curve-distribute-between-vertices/#close-the-loop","title":"Close the Loop","text":"<p>If you want the curve along which your vertices are distributed to form a closed loop, you must have selected \"Use Selection Order\", and \"Close\":</p> <p></p>"},{"location":"modeling/curve-distribute-between-vertices/#create-a-deformer","title":"Create a Deformer","text":"<p>If you check \"Create Deformer\", locators will be created for manipulating a wire deformer connected to your mesh:</p> <p></p>"},{"location":"modeling/loft-distribute-vertices-between-edges/","title":"Loft Distribute Vertices Between Edges","text":""},{"location":"modeling/loft-distribute-vertices-between-edges/#default-options","title":"Default Options","text":"<p>With the default options, \"Loft Distribute Vertices Between Edges\" will distribute vertices sandwiched between your selected edges along a (dynamically created and not retained) lofted NURBS surface passing between the edges you've selected:</p> <p></p> <p>Note: The vertices selected adhere to the same logic as Select Edges Between Vertices.</p>"},{"location":"modeling/loft-distribute-vertices-between-edges/#proportional-distributions","title":"Proportional Distributions","text":"<p>The default distribution type for this tool is \"Uniform\", however you can select \"Proportional\" distribution in order to retain the same relative spacing between redistributed vertices:</p> <p></p>"},{"location":"modeling/loft-distribute-vertices-between-edges/#create-a-deformer","title":"Create a Deformer","text":"<p>If you check \"Create Deformer\", the curves forming the loft will be retained and connected to a proximity wrap deformer affecting your mesh:</p> <p></p>"},{"location":"selection/flood-select/","title":"Flood Select","text":"<p>For this tool, simply select edges around a region of a polygon mesh, then [shift] + select a face, vertex, or UV within that region and execute \"Flood Select\" to select all faces/vertices/UVs in the encompassed mesh region:</p> <p></p>"},{"location":"selection/select-edges-between-uvs/","title":"Select Edges Between UVs","text":""},{"location":"selection/select-edges-between-uvs/#default-options","title":"Default Options","text":"<p>With the default options, \"Select Edges Between UVs\" will select the edge path with the fewest number of possible edges between two or more UVs.</p> <p></p>"},{"location":"selection/select-edges-between-uvs/#use-selection-order","title":"Use Selection Order","text":"<p>If your selected UVs form a path with multiple directional changes, you'll want to check the \"Use Selection Order\" option for the most predictable results:</p> <p></p>"},{"location":"selection/select-edges-between-uvs/#close-the-loop","title":"Close the Loop","text":"<p>If you want your selection to form a closed loop, you must have selected \"Use Selection Order\", and \"Close\":</p> <p></p>"},{"location":"selection/select-edges-between-vertices/","title":"Select Edges Between Vertices","text":""},{"location":"selection/select-edges-between-vertices/#default-options","title":"Default Options","text":"<p>With the default options, \"Select Edges Between Vertices\" will select the edge path with the fewest number of possible edges between two or more vertices.</p> <p></p>"},{"location":"selection/select-edges-between-vertices/#use-selection-order","title":"Use Selection Order","text":"<p>If your selected vertices form a path with multiple directional changes, you'll want to check the \"Use Selection Order\" option for the most predictable results:</p> <p></p>"},{"location":"selection/select-edges-between-vertices/#close-the-loop","title":"Close the Loop","text":"<p>If you want your selection to form a closed loop, you must have selected \"Use Selection Order\", and \"Close\":</p> <p></p>"},{"location":"selection/select-edges-between-vertices/#why","title":"Why?","text":"<p>Why is this tool useful when there is already a \"shortest edge path\" tool in Maya?</p> <ul> <li>ZenTools \"Select Edges Between Vertices\" uses a different (better)     algorithm. The path selected always has the fewest number of edges.     This means that edge loops are followed more predictably.</li> <li>ZenTools \"Select Edges Between Vertices\" does not clear prior edge     selections on your mesh on execution. This allows easy selection of     multiple non-contiguous (such as parallel) edge paths, which is highly     desirable when selecting edges for use with     Loft Distribute Vertices Between Edges</li> </ul>"},{"location":"selection/select-uvs-between-uvs/","title":"Select UVs Between UVs","text":""},{"location":"selection/select-uvs-between-uvs/#default-options","title":"Default Options","text":"<p>With the default options, \"Select UVs Between UVs\" will select the path with the fewest number of possible edges between two or more UVs.</p> <p></p>"},{"location":"selection/select-uvs-between-uvs/#use-selection-order","title":"Use Selection Order","text":"<p>If your selected UVs form a path with multiple directional changes, you'll want to check the \"Use Selection Order\" option for the most predictable results:</p> <p></p>"},{"location":"selection/select-uvs-between-uvs/#close-the-loop","title":"Close the Loop","text":"<p>If you want your selection to form a closed loop, you must have selected \"Use Selection Order\", and \"Close\":</p> <p></p>"},{"location":"texturing/curve-distribute-between-uvs/","title":"Curve Distribute Between UVs","text":""},{"location":"texturing/curve-distribute-between-uvs/#default-options","title":"Default Options","text":"<p>With the default options, \"Curve Distribute Between UVs\" will distribute UVs forming a path between your selected UVs along a (dynamically created and not retained) NURBS curve passing between the UVs you've selected:</p> <p></p> <p>Note: The UVs selected adhere to the same logic as Select UVs Between UVs.</p>"},{"location":"texturing/curve-distribute-between-uvs/#proportional-distribution","title":"Proportional Distribution","text":"<p>The default distribution type for this tool is \"Uniform\", however you can select \"Proportional\" distribution in order to distribute UVs with spacing relative to their distribution in 3d space:</p> <p></p>"},{"location":"texturing/curve-distribute-between-uvs/#use-selection-order","title":"Use Selection Order","text":"<p>If your selected UVs form a path with multiple directional changes, you'll want to check the \"Use Selection Order\" option for the most predictable results:</p> <p></p>"},{"location":"texturing/curve-distribute-between-uvs/#close-the-loop","title":"Close the Loop","text":"<p>If you want the curve along which your UVs are distributed to form a closed loop, you must have selected \"Use Selection Order\", and \"Close\":</p> <p></p>"},{"location":"texturing/loft-distribute-uvs-between-edges-or-uvs/","title":"Loft Distribute UVs Between Edges or UVs","text":""},{"location":"texturing/loft-distribute-uvs-between-edges-or-uvs/#default-options","title":"Default Options","text":"<p>With the default options, \"Loft Distribute UVs Between Edges or UVs\" will distribute UVs sandwiched between your selected edges and/or UVs along a (dynamically created and not retained)loofted NURBS surface created from the UVs and/or edges you've selected:</p> <p></p>"},{"location":"texturing/loft-distribute-uvs-between-edges-or-uvs/#proportional-distribution","title":"Proportional Distribution","text":"<p>The default distribution type for this tool is \"Uniform\", however you can select \"Proportional\" distribution in order to distribute UVs with spacing relative to their distribution in 3d space:</p> <p></p>"}]}